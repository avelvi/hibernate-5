package com.avelvi.hibernate.chapter02;

import com.avelvi.hibernate.chapter02.entities.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

import static org.testng.Assert.assertEquals;

public class JdbcPersistenceTest {

    private static final String DB_URL = "jdbc:h2:./db1";
    private static final String DB_USER = "sa";

    private final Logger logger = LoggerFactory.getLogger(JdbcPersistenceTest.class);

    @BeforeSuite
    public void setup() {
        final String dropTable = "DROP TABLE messages IF EXISTS";
        final String createTable = "CREATE TABLE messages (" +
                "id BIGINT GENERATED BY DEFAULT AS IDENTITY " +
                "PRIMARY KEY, " +
                "text VARCHAR(256))";
        try(Connection connection = DriverManager.getConnection(DB_URL, DB_USER, "")) {
            try(PreparedStatement ps = connection.prepareStatement(dropTable)) {
                ps.execute();
            }

            try (PreparedStatement ps = connection.prepareStatement(createTable)) {
                ps.execute();
                logger.info("Table message was created");
            }

        } catch (SQLException e) {
            logger.error(e.getMessage());
            throw new RuntimeException(e);
        }
    }

    @Test
    public void saveMessage() {
        final String insertSql = "INSERT INTO messages (text) VALUES (?)";
        try(Connection connection = DriverManager.getConnection(DB_URL, DB_USER, "")){
            try(PreparedStatement ps = connection.prepareStatement(insertSql)) {
                ps.setString(1, "Simple text");
                ps.execute();
            }
            connection.commit();
            logger.info("Message was saved to DB");

        } catch (SQLException e) {
            logger.error(e.getMessage());
            throw new RuntimeException(e);
        }
    }

    @Test(dependsOnMethods = "saveMessage")
    public void readMessage() {
        final String selectSql = "SELECT id, text FROM messages";
        List<Message> result = new LinkedList<>();
        try(Connection connection = DriverManager.getConnection(DB_URL, DB_USER, "")) {
            try (PreparedStatement ps = connection.prepareStatement(selectSql)) {
                try (ResultSet rs = ps.executeQuery()) {
                    while (rs.next()) {
                        Message message = new Message();
                        message.setId(rs.getLong(1));
                        message.setText(rs.getString(2));
                        result.add(message);
                    }

                    assertEquals(result.size(), 1);
                    for (Message m : result) {
                        logger.info(m.toString());
                    }
                }
            }

        } catch (SQLException e) {
            logger.error(e.getMessage());
            throw new RuntimeException(e);
        }
    }

}
